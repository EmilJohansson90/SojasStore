// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(SojasStoreContext))]
    [Migration("20220112142340_AddedSeeds")]
    partial class AddedSeeds
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DAL.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ssn")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1001,
                            Name = "Erik",
                            PhoneNumber = "123-456",
                            Ssn = 1001
                        },
                        new
                        {
                            EmployeeId = 1002,
                            Name = "Johanna",
                            PhoneNumber = "456-789",
                            Ssn = 2001
                        },
                        new
                        {
                            EmployeeId = 1003,
                            Name = "Eva",
                            PhoneNumber = "789-123",
                            Ssn = 1850
                        });
                });

            modelBuilder.Entity("DAL.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("BarCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("BestBefore")
                        .HasColumnType("Date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 10001,
                            Amount = 2,
                            BarCode = 123456,
                            BestBefore = new DateTime(2022, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mjölk",
                            Price = 13.5
                        },
                        new
                        {
                            ProductId = 10002,
                            Amount = 8,
                            BarCode = 222555,
                            BestBefore = new DateTime(2022, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kaffe",
                            Price = 25.989999999999998
                        },
                        new
                        {
                            ProductId = 10003,
                            Amount = 12,
                            BarCode = 558874,
                            BestBefore = new DateTime(2022, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Grädde",
                            Price = 54.200000000000003
                        },
                        new
                        {
                            ProductId = 10004,
                            Amount = 1,
                            BarCode = 654321,
                            BestBefore = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ost",
                            Price = 108.5
                        },
                        new
                        {
                            ProductId = 10005,
                            Amount = 90,
                            BarCode = 258369,
                            BestBefore = new DateTime(2022, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fisk",
                            Price = 81.900000000000006
                        },
                        new
                        {
                            ProductId = 10006,
                            Amount = 15,
                            BarCode = 147258,
                            BestBefore = new DateTime(2022, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bröd",
                            Price = 25.899999999999999
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
